name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Allow Claude to run quality and testing commands
          allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*),Bash(npm run type-check),Bash(pre-commit run --all-files),Bash(cd frontend && npm run *),Bash(cd backend && black .),Bash(cd backend && isort .),Bash(cd backend && flake8 .),Bash(cd backend && mypy .)"

          # Custom instructions for Music Modes App
          custom_instructions: |
            You are helping with the Music Modes App, a sophisticated music theory analysis tool with AI integration.

            Key Project Context:
            - Frontend: React 19 + TypeScript + Vitest + Playwright E2E testing
            - Backend: FastAPI + Python with music theory libraries (librosa, music21)
            - Testing: Comprehensive unit, component, and E2E tests with MIDI support
            - Quality: Pre-commit hooks, ESLint, TypeScript, Black, flake8, mypy
            - Music Domain: Advanced modal analysis, chord progression analysis, MIDI processing

            Development Standards:
            - Always run tests for any code changes: `npm run test:ci` or specific test suites
            - Use TypeScript for all frontend code with strict typing
            - Follow music theory best practices - this app serves music educators and students
            - Maintain comprehensive test coverage, especially for music theory calculations
            - Use pre-commit hooks: `pre-commit run --all-files` to ensure code quality
            - Backend code must pass: black, isort, flake8, mypy, and bandit security checks
            - E2E tests include MIDI functionality - preserve MIDI-related code carefully

            Testing Commands:
            - Unit tests: `cd frontend && npm run test:unit`
            - Component tests: `cd frontend && npm run test:component`
            - E2E tests: `cd frontend && npm run test:e2e`
            - Full test suite: `cd frontend && npm run test:ci`
            - Backend quality: `cd backend && black . && isort . && flake8 . && mypy .`

            When making changes:
            1. Understand the music theory context if applicable
            2. Write/update tests for any new functionality
            3. Run quality checks before considering work complete
            4. Preserve existing MIDI and audio processing capabilities
            5. Consider both educational and practical use cases for music theory features

          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test
